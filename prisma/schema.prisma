generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboards")
  categories Category[]  @relation("StoreToCategories")
  sizes      Size[]      @relation("StoreToSizes")
  colors     Color[]     @relation("StoreToColors")
  products   Product[]   @relation("StoreToProducts")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id       String @id @default(uuid())
  storeId  String
  label    String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation("StoreToBillboards", fields: [storeId], references: [id])
  categories Category[] @relation("BillboardToCategories")

  @@index([storeId])
}

model Category {
  id          String @id @default(uuid())
  name        String
  storeId     String
  billboardId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store     Store     @relation("StoreToCategories", fields: [storeId], references: [id])
  billboard Billboard @relation("BillboardToCategories", fields: [billboardId], references: [id])
  products  Product[] @relation("CategoryToProducts")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id      String @id @default(uuid())
  name    String
  value   String
  storeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation("StoreToSizes", fields: [storeId], references: [id])
  products Product[] @relation("SizeToProducts")

  @@index([storeId])
}

model Color {
  id      String @id @default(uuid())
  name    String
  value   String
  storeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] @relation("ColorToProducts")

  store Store @relation("StoreToColors", fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  storeId    String
  categoryId String
  sizeId     String
  colorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Image[] @relation("ProductToImages")

  store      Store       @relation("StoreToProducts", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProducts", fields: [categoryId], references: [id])
  size       Size        @relation("SizeToProducts", fields: [sizeId], references: [id])
  color      Color       @relation("ColorToProducts", fields: [colorId], references: [id])
  orderItems OrderItem[] @relation("ProductToOrderItem")

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id  String @id @default(uuid())
  url String

  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation("ProductToImages", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model OrderItem {
  id String @id @default(uuid())

  orderId   String
  productId String

  Order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation("ProductToOrderItem", fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Order {
  id      String  @id @default(uuid())
  isPaid  Boolean @default(false)
  phone   String  @default("")
  address String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String

  store Store @relation("StoreToOrder", fields: [storeId], references: [id])

  orderItems OrderItem[]

  @@index([storeId])
}
